from main import WordStorage, encode_text, LikelihoodBasedTextGenerator, BackOffGenerator, NGramTextGenerator, decode_text
from ngrams.ngram_trie import NGramTrie


print("GENERATE WORD WITH LIKELIHOOD")

corpus = ('i', 'have', 'a', 'cat', '<END>',
          'his', 'name', 'is', 'bruno', '<END>',
          'i', 'have', 'a', 'dog', 'too', '<END>',
          'his', 'name', 'is', 'rex', '<END>',
          'her', 'name', 'is', 'rex', 'too', '<END>')

storage = WordStorage()
storage.update(corpus)

encoded = encode_text(storage, corpus)

trie = NGramTrie(3, encoded)
context = (storage.get_id('have'),
           storage.get_id('a'),)
generator = LikelihoodBasedTextGenerator(storage, trie)

generated_word = generator._generate_next_word(context)
print(f"generated word in context {generated_word}")
print("-------------------------------------------")


print("BACKOFF GENERATOR")

two = NGramTrie(2, encoded)
trie = NGramTrie(3, encoded)

context = (storage.get_id('name'),
           storage.get_id('is'),)

generator = BackOffGenerator(storage, trie, two)

generated_backoff = generator._generate_next_word(context)
print(f"word generated by backoff is {generated_backoff}")
print("-------------------------------------------")

print("LET'S GENERATE TEXT")

encoded = encode_text(storage, corpus)

trie = NGramTrie(2, encoded)

generator = NGramTextGenerator(storage, trie)

context = (storage.get_id('bruno'),)
generated_text = generator.generate_text(context, 3)
print(f"generated text is {generated_text}")
decoded_generated = " ".join(list(decode_text(storage, generated_text)))
print(f"in normal word this text is -------- {decoded_generated}")
